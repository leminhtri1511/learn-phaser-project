import Player from "../objects/Player.js";
import Star from "../objects/Star.js";
import Enemy from "../objects/enemy.js";

export default class MainScene extends Phaser.Scene {
    constructor() {
        super("MainScene");
    }

    preload() {
        this.load.image('sky', 'https://labs.phaser.io/assets/skies/space3.png');
        this.load.image('ground', 'https://labs.phaser.io/assets/platforms/platform.png');
        this.load.image('star', 'https://labs.phaser.io/assets/demoscene/star.png');
        this.load.spritesheet('dude', 'https://labs.phaser.io/assets/sprites/dude.png', { frameWidth: 32, frameHeight: 48 });
        this.load.image('enemy', 'https://labs.phaser.io/assets/sprites/ufo.png'); // ·∫¢nh k·∫ª ƒë·ªãch
    }

    create() {
        // ƒê·∫£m b·∫£o tr·∫°ng th√°i game ƒë∆∞·ª£c reset
        this.isGameOver = false;
        this.isHit = false;

        // Th√™m n·ªÅn tr·ªùi
        this.add.image(180, 320, 'sky');

        // T·∫°o m·∫∑t ƒë·∫•t
        let ground = this.physics.add.staticGroup();
        let groundTile = ground.create(180, 620, 'ground');
        groundTile.setScale(20, 1).refreshBody();

        // T·∫°o nh√¢n v·∫≠t
        this.player = new Player(this, 50, 550);

        // Bi·∫øn ki·ªÉm so√°t tr·∫°ng th√°i b·ªã ƒë√°nh
        this.isHit = false;

        // // T·∫°o v·∫≠t ph·∫©m (stars)
        // this.stars = new Star(this);

        // T·∫°o k·∫ª ƒë·ªãch
        this.enemy = new Enemy(this, this.scale.width - 50, 550);

        // Bi·∫øn qu·∫£n l√Ω m√°u nh√¢n v·∫≠t
        this.playerHP = 3; // Nh√¢n v·∫≠t c√≥ 3 m√°u ban ƒë·∫ßu
        this.hpText = this.add.text(16, 40, 'HP: ' + this.playerHP, { fontSize: '20px', fill: '#fff' });

        // X·ª≠ l√Ω va ch·∫°m gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng
        this.physics.add.collider(this.player, ground);
        this.physics.add.collider(this.enemy, ground);
        this.physics.add.collider(this.player, this.enemy, this.handlePlayerEnemyCollision, null, this);



        // X·ª≠ l√Ω khi nh√¢n v·∫≠t thu th·∫≠p v·∫≠t ph·∫©m
        // this.physics.add.overlap(this.player, this.stars.group, (player, star) => {
        //     this.stars.collectStar(star);
        // }, null, this);

        // // Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
        // this.score = 0;
        // this.scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '20px', fill: '#fff' });
    }

    hitEnemy(player, enemy) {
        if (this.isHit || this.isGameOver) return; // N·∫øu v·ª´a b·ªã ƒë√°nh ho·∫∑c game over, b·ªè qua

        this.isHit = true;

        if (this.playerHP > 1) {
            this.playerHP--;
            this.hpText.setText('HP: ' + this.playerHP);
            console.log(`Nh√¢n v·∫≠t b·ªã t·∫•n c√¥ng! M√°u c√≤n l·∫°i: ${this.playerHP}`);

            // Rung m√†n h√¨nh khi b·ªã t·∫•n c√¥ng
            this.cameras.main.shake(80, 0.01);

            // ƒê·∫©y nh√¢n v·∫≠t ra xa
            let knockBackDirection = (enemy.body.velocity.x > 0) ? 1 : -1;
            player.setVelocityX(knockBackDirection * 200);
            enemy.setVelocityX(-knockBackDirection * 200);

            // ƒê·∫©y l√™n nh·∫π
            player.setVelocityY(-150);
            enemy.setVelocityY(-100);

            // Nh·∫•p nh√°y nh√¢n v·∫≠t
            player.setTint(0xff0000);
            enemy.setTint(0xff0000);
            this.time.delayedCall(500, () => {
                player.clearTint();
                enemy.clearTint();
            }, [], this);

            this.time.delayedCall(500, () => {
                this.isHit = false;
            }, [], this);

        } else {
            this.gameOver("Nh√¢n v·∫≠t h·∫øt m√°u");
        }
    }

    handlePlayerEnemyCollision(player, enemy) {
        if (player.body.velocity.y > 0 && player.body.bottom < enemy.body.top + 5) {
            console.log("üí• K·∫ª ƒë·ªãch b·ªã ti√™u di·ªát!");
    
            // V√¥ hi·ªáu h√≥a va ch·∫°m ƒë·ªÉ tr√°nh l·ªói ti·∫øp t·ª•c va ch·∫°m sau khi b·ªã ti√™u di·ªát
            enemy.body.enable = false;
    
            // X√≥a k·∫ª ƒë·ªãch kh·ªèi game
            enemy.destroy();
    
            // Ph·∫£n h·ªìi cho nh√¢n v·∫≠t: b·∫≠t l√™n nh·∫π
            player.setVelocityY(-200);
    
            // TƒÉng ƒëi·ªÉm s·ªë
            this.score += 10;
            this.scoreText.setText('Score: ' + this.score);
    
            // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ k·∫ª ƒë·ªãch ƒë√£ b·ªã ti√™u di·ªát
            let enemiesLeft = this.children.getChildren().some(child => child instanceof Enemy);
            if (!enemiesLeft) {
                this.youWon();
            }
        } else {
            this.hitEnemy(player, enemy);
        }
    }
    

    youWon() {
        if (this.isGameOver) return; // N·∫øu game ƒë√£ k·∫øt th√∫c, kh√¥ng l√†m g√¨ n·ªØa
        this.isGameOver = true; // ƒê√°nh d·∫•u tr·∫°ng th√°i game over

        console.log("üéâ YOU WON!");

        // D·ª´ng t·∫•t c·∫£ chuy·ªÉn ƒë·ªông
        this.physics.pause();

        // Hi·ªÉn th·ªã th√¥ng b√°o chi·∫øn th·∫Øng
        this.add.text(this.scale.width / 2, this.scale.height / 2 - 50, 'YOU WON!', {
            fontSize: '40px',
            fill: '#00ff00',
            fontStyle: 'bold'
        }).setOrigin(0.5);

        // T·∫°o n√∫t Play Again
        let playAgainButton = this.add.text(this.scale.width / 2, this.scale.height / 2 + 50, 'Play Again', {
            fontSize: '25px',
            fill: '#ffffff',
            backgroundColor: '#00ff00',
            padding: { x: 20, y: 10 }
        }).setOrigin(0.5).setInteractive();

        // Khi b·∫•m n√∫t Play Again, reset l·∫°i game ƒë√∫ng c√°ch
        playAgainButton.on('pointerdown', () => {
            this.scene.restart(); // D√πng c√°ch n√†y ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi th·ª© ƒë∆∞·ª£c reset ƒë√∫ng c√°ch
        });
    }


    gameOver(reason) {
        if (this.isGameOver) return; // N·∫øu game ƒë√£ k·∫øt th√∫c, kh√¥ng l√†m g√¨ n·ªØa
        this.isGameOver = true; // ƒê√°nh d·∫•u tr·∫°ng th√°i game over

        console.log("üî• Game Over! L√Ω do:", reason);

        // D·ª´ng t·∫•t c·∫£ chuy·ªÉn ƒë·ªông
        this.physics.pause();

        // Hi·ªÉn th·ªã th√¥ng b√°o Game Over
        this.add.text(this.scale.width / 2, this.scale.height / 2 - 50, 'GAME OVER', {
            fontSize: '40px',
            fill: '#ff0000',
            fontStyle: 'bold'
        }).setOrigin(0.5);

        // T·∫°o n√∫t Restart
        let restartButton = this.add.text(this.scale.width / 2, this.scale.height / 2 + 50, 'Restart', {
            fontSize: '25px',
            fill: '#ffffff',
            backgroundColor: '#ff0000',
            padding: { x: 20, y: 10 }
        }).setOrigin(0.5).setInteractive();

        // Khi b·∫•m n√∫t Restart, reset l·∫°i game ƒë√∫ng c√°ch
        restartButton.on('pointerdown', () => {
            this.scene.restart(); // D√πng c√°ch n√†y ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi th·ª© ƒë∆∞·ª£c reset ƒë√∫ng c√°ch
        });
    }


    restartGame() {
        console.log("üîÑ Restarting game...");
    
        // Reset tr·∫°ng th√°i game
        this.isGameOver = false;
        this.isHit = false;
        this.playerHP = 3;
    
        // X√≥a vƒÉn b·∫£n Game Over v√† n√∫t Restart n·∫øu c√≥
        this.children.each((child) => {
            if (child.type === "Text") {
                child.destroy();
            }
        });
    
        // B·∫≠t l·∫°i v·∫≠t l√Ω
        this.physics.resume();
    
        // Reset hi·ªÉn th·ªã m√°u
        this.hpText.setText('HP: ' + this.playerHP);
    
        // Reset nh√¢n v·∫≠t
        this.player.setPosition(50, 550);
        this.player.setTint(0xffffff);
    
        // X√≥a v√† t·∫°o l·∫°i enemy
        if (this.enemy) {
            this.enemy.destroy();
        }
        this.enemy = new Enemy(this, this.scale.width - 50, 550);
        this.physics.add.collider(this.enemy, this.ground);
        this.physics.add.collider(this.player, this.enemy, this.handlePlayerEnemyCollision, null, this);
    
        console.log("‚úÖ Game restarted!");
    }
    

    update() {
        if (!this.isGameOver) {
            this.player.update();
        }
        this.enemy.update();
        // this.stars.update(); // C·∫≠p nh·∫≠t sao (ƒë·ªÉ x√≥a khi r∆°i kh·ªèi m√†n h√¨nh)
    }
}
